#pragma once
#include <map>
#include <vector>
#include <string>

class Leet {
    using str = std::basic_string<char8_t>;
    std::map<char, std::vector<str>> t;
public:
    Leet() {
        t['A'] = { u8"Ꭿ", u8"∀", u8"₳", u8"Ǻ", u8"ǻ", u8"α", u8"ά", u8"Ǡ", u8"Ắ", u8"ắ", u8"Ằ", u8"ằ", u8"ẳ", u8"Ẵ", u8"ẵ", u8"Ä", u8"ª", u8"ä", u8"Å", u8"À", u8"Á", u8"Â", u8"å", u8"ã", u8"â", u8"à", u8"á", u8"Ã", u8"ᗩ", u8"@", u8"Ⱥ", u8"Ǟ", };
        t['B'] = { u8"ℬ", u8"Ᏸ", u8"β", u8"฿", u8"ß", u8"Ђ", u8"ᗷ", u8"ᗽ", u8"ᗾ", u8"ᗿ", u8"Ɓ", u8"ƀ", u8"ხ", u8"␢", u8"Ᏸ", u8"ᗸ", u8"ᗹ", };
        t['C'] = { u8"☾", u8"ℭ", u8"ℂ", u8"Ç", u8"¢", u8"ç", u8"Č", u8"ċ", u8"Ċ", u8"ĉ", u8"ς", u8"Ĉ", u8"ć", u8"Ć", u8"č", u8"Ḉ", u8"ḉ", u8"⊂", u8"Ꮸ", u8"₡", u8"¢", u8"Ⴚ", };
        t['D'] = { u8"ᗫ", u8"Ɗ", u8"Ď", u8"ď", u8"Đ", u8"đ", u8"ð", u8"∂", u8"₫", u8"ȡ", };
        t['E'] = { u8"ℰ", u8"ℯ", u8"ໂ", u8"£", u8"Ē", u8"℮", u8"ē", u8"Ė", u8"ė", u8"Ę", u8"ě", u8"Ě", u8"ę", u8"Έ", u8"ê", u8"ξ", u8"Ê", u8"È", u8"€", u8"É", u8"∑", u8"Ế", u8"Ề", u8"Ể", u8"Ễ", u8"é", u8"è", u8"ع", u8"Є", u8"є", u8"έ", u8"ε", u8"Ҿ", u8"ҿ", };
        t['F'] = { u8"ℱ", u8"₣", u8"ƒ", u8"∮", u8"Ḟ", u8"ḟ", u8"ჶ", u8"ᶂ", u8"φ", };
        t['G'] = { u8"Ꮹ", u8"Ꮆ", u8"ℊ", u8"Ǥ", u8"ǥ", u8"Ĝ", u8"ĝ", u8"Ğ", u8"ğ", u8"Ġ", u8"ġ", u8"Ģ", u8"ģ", u8"פ", u8"ᶃ", u8"₲", };
        t['H'] = { u8"ℍ", u8"ℋ", u8"ℎ", u8"ℌ", u8"ℏ", u8"ዙ", u8"Ꮵ", u8"Ĥ", u8"Ħ", u8"ħ", u8"Ή", u8"廾", u8"Ћ", u8"ђ", u8"Ḩ", u8"Һ", u8"ḩ", u8"♄", u8"ਮ", };
        t['I'] = { u8"ℐ", u8"ί", u8"ι", u8"Ï", u8"Ί", u8"Î", u8"ì", u8"Ì", u8"í", u8"Í", u8"î", u8"ϊ", u8"ΐ", u8"Ĩ", u8"ĩ", u8"Ī", u8"ī", u8"Ĭ", u8"ĭ", u8"İ", u8"į", u8"Į", u8"Ꭵ", };
        t['J'] = { u8"ჟ", u8"Ĵ", u8"ĵ", u8"ᶖ", u8"ɉ", u8"ℑ", };
        t['K'] = { u8"₭", u8"Ꮶ", u8"Ќ", u8"k", u8"ќ", u8"ķ", u8"Ķ", u8"Ҝ", u8"ҝ", u8"ᶄ", u8"Ҡ", u8"ҡ", };
        t['L'] = { u8"ℒ", u8"ℓ", u8"Ŀ", u8"ŀ", u8"Ĺ", u8"ĺ", u8"Ļ", u8"ļ", u8"λ", u8"₤", u8"Ł", u8"ł", u8"ľ", u8"Ľ", u8"Ḽ", u8"ḽ", u8"ȴ", u8"Ꮭ", };
        t['M'] = { u8"ℳ", u8"ʍ", u8"ᶆ", u8"Ḿ", u8"ḿ", u8"ᗰ", u8"ᙢ", u8"爪", u8"₥", u8"ጠ", };
        t['N'] = { u8"ℕ", u8"η", u8"ñ", u8"ח", u8"Ñ", u8"ή", u8"ŋ", u8"Ŋ", u8"Ń", u8"ń", u8"Ņ", u8"ņ", u8"Ň", u8"ň", u8"ŉ", u8"ȵ", u8"ℵ", u8"₦", u8"ห", u8"ກ", u8"⋒", u8"Ӈ", u8"ӈ", };
        t['O'] = { u8"ტ", u8"ó", u8"ό", u8"σ", u8"ǿ", u8"Ǿ", u8"Θ", u8"ò", u8"Ó", u8"Ò", u8"Ô", u8"ô", u8"Ö", u8"ö", u8"Õ", u8"õ", u8"ờ", u8"ớ", u8"ọ", u8"Ọ", u8"ợ", u8"Ợ", u8"ø", u8"Ø", u8"Ό", u8"Ở", u8"Ờ", u8"Ớ", u8"Ổ", u8"Ợ", u8"Ō", u8"ō", u8"Ő", };
        t['P'] = { u8"ℙ", u8"℘", u8"ρ", u8"Ꭾ", u8"Ꮅ", u8"尸", u8"Ҏ", u8"ҏ", u8"ᶈ", u8"₱", u8"☧", u8"ᖘ", u8"ק", u8"₽", u8"թ", u8"Ƿ", u8"Ҏ", u8"ҏ", };
        t['Q'] = { u8"ℚ", u8"q", u8"Q", u8"ᶐ", u8"Ǭ", u8"ǭ", u8"ჹ", u8"૧", };
        t['R'] = { u8"ℝ", u8"ℜ", u8"ℛ", u8"℟", u8"ჩ", u8"ᖇ", u8"ř", u8"Ř", u8"ŗ", u8"Ŗ", u8"ŕ", u8"Ŕ", u8"ᶉ", u8"Ꮢ", u8"尺", };
        t['S'] = { u8"Ꮥ", u8"Ṧ", u8"ṧ", u8"ȿ", u8"§", u8"Ś", u8"ś", u8"š", u8"Š", u8"ş", u8"Ş", u8"ŝ", u8"Ŝ", u8"₰", u8"∫", u8"$", u8"ֆ", u8"Տ", };
        t['T'] = { u8"₸", u8"†", u8"T", u8"t", u8"τ", u8"Ţ", u8"ţ", u8"Ť", u8"ť", u8"ŧ", u8"Ŧ", u8"干", u8"Ṫ", u8"ṫ", u8"ナ", u8"Ꮏ", u8"Ꮖ", u8"テ", u8"₮", u8"⍡", };
        t['U'] = { u8"∪", u8"ᙀ", u8"Ũ", u8"Ủ", u8"Ừ", u8"Ử", u8"Ữ", u8"Ự", u8"ύ", u8"ϋ", u8"ú", u8"Ú", u8"ΰ", u8"ù", u8"Û", u8"û", u8"Ü", u8"ử", u8"ữ", u8"ự", u8"ü", u8"ừ", u8"Ũ", u8"ũ", u8"Ū", u8"ū", u8"Ŭ", u8"ŭ", u8"ų", u8"Ų", u8"ű", u8"Ű", u8"ů", u8"Ů", u8"น", u8"Ա", };
        t['V'] = { u8"✓", u8"∨", u8"√", u8"Ꮙ", u8"Ṽ", u8"ṽ", u8"ᶌ", u8"/", u8"℣", };
        t['W'] = { u8"₩", u8"ẃ", u8"Ẃ", u8"ẁ", u8"Ẁ", u8"ẅ", u8"ώ", u8"ω", u8"ŵ", u8"Ŵ", u8"Ꮤ", u8"Ꮃ", u8"ฬ", u8"ᗯ", u8"ᙡ", u8"Ẅ", u8"ѡ", u8"ಎ", u8"ಭ", u8"Ꮚ", u8"Ꮗ", u8"ผ", u8"ฝ", u8"พ", u8"ฟ", };
        t['X'] = { u8"χ", u8"×", u8"✗", u8"✘", u8"᙭", u8"ჯ", u8"Ẍ", u8"ẍ", u8"ᶍ", u8"א", };
        t['Y'] = { u8"ɣ", u8"Ꭹ", u8"Ꮍ", u8"Ẏ", u8"ẏ", u8"ϒ", u8"ɤ", u8"￥", u8"ע", u8"௶", u8"Ⴘ", };
        t['Z'] = { u8"ℤ", u8"乙", u8"Ẑ", u8"ẑ", u8"ɀ", u8"Ꮓ", };
    }

    str encode(std::string_view s) {
        str ret;
        for (auto e : s) {
            e = std::toupper(e);
            if (t.contains(e)) {
                ret += t[e][rand() % t[e].size()];
            } else {
                ret += e;
            }
        }
        return ret;
    }
};
